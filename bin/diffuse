#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (C) 2006-2018 Derrick Moser <derrick_moser@yahoo.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('PangoCairo', '1.0')
from gi.repository import Gtk, Gdk, GdkPixbuf, Pango, PangoCairo

import os, sys, unicodedata

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', os.path.join('lib', 'python3', 'dist-packages'))))

import diffuse.acache, diffuse.pq, diffuse.signal, diffuse.filecompare

DIFFUSE_STOCK_NEW_2WAY_MERGE = 'diffuse-new-2-way-merge'
DIFFUSE_STOCK_NEW_3WAY_MERGE = 'diffuse-new-3-way-merge'
DIFFUSE_STOCK_LEFT_RIGHT = 'diffuse-left-right'
DIFFUSE_STOCK_RIGHT_LEFT = 'diffuse-right-left'

def get_image(name, size):
    if name == DIFFUSE_STOCK_NEW_2WAY_MERGE:
        # render new 2-way merge icon
        w = Gtk.IconSize.lookup(size)[1]
        p0 = Gtk.IconTheme.get_default().load_icon('document-new', w, 0)
        s = 0.8
        sw = int(s * w)
        s1 = w - sw
        p = GdkPixbuf.Pixbuf.new(GdkPixbuf.Colorspace.RGB, True, 8, w, w)
        p.fill(0)
        p0.composite(p, 0, 0, sw, sw, 0, 0, s, s, GdkPixbuf.InterpType.BILINEAR, 255)
        p0.composite(p, s1, s1, sw, sw, s1, s1, s, s, GdkPixbuf.InterpType.BILINEAR, 255)
        return Gtk.Image.new_from_pixbuf(p)
    if name == DIFFUSE_STOCK_NEW_3WAY_MERGE:
        # render new 3-way merge icon
        w = Gtk.IconSize.lookup(size)[1]
        p0 = Gtk.IconTheme.get_default().load_icon('document-new', w, 0)
        s = 0.7
        sw = int(s * w)
        s1 = (w - sw) / 2
        s2 = w - sw
        p = GdkPixbuf.Pixbuf.new(GdkPixbuf.Colorspace.RGB, True, 8, w, w)
        p.fill(0)
        p0.composite(p, 0, 0, sw, sw, 0, 0, s, s, GdkPixbuf.InterpType.BILINEAR, 255)
        p0.composite(p, s1, s1, sw, sw, s1, s1, s, s, GdkPixbuf.InterpType.BILINEAR, 255)
        p0.composite(p, s2, s2, sw, sw, s2, s2, s, s, GdkPixbuf.InterpType.BILINEAR, 255)
        return Gtk.Image.new_from_pixbuf(p)
    if name == DIFFUSE_STOCK_LEFT_RIGHT:
        # create merge from left then right icon
        w = Gtk.IconSize.lookup(size)[1]
        p0 = Gtk.IconTheme.get_default().load_icon('go-next', w, 0)
        p1 = Gtk.IconTheme.get_default().load_icon('go-previous', w, 0)
        s = 0.65
        sw = int(s * w)
        s1 = w - sw
        p = GdkPixbuf.Pixbuf.new(GdkPixbuf.Colorspace.RGB, True, 8, w, w)
        p.fill(0)
        p1.composite(p, s1, s1, sw, sw, s1, s1, s, s, GdkPixbuf.InterpType.BILINEAR, 255)
        p0.composite(p, 0, 0, sw, sw, 0, 0, s, s, GdkPixbuf.InterpType.BILINEAR, 255)
        return Gtk.Image.new_from_pixbuf(p)
    if name == DIFFUSE_STOCK_RIGHT_LEFT:
        # create merge from right then left icon
        w = Gtk.IconSize.lookup(size)[1]
        p0 = Gtk.IconTheme.get_default().load_icon('go-next', w, 0)
        p1 = Gtk.IconTheme.get_default().load_icon('go-previous', w, 0)
        s = 0.65
        sw = int(s * w)
        s1 = w - sw
        p = GdkPixbuf.Pixbuf.new(GdkPixbuf.Colorspace.RGB, True, 8, w, w)
        p.fill(0)
        p0.composite(p, 0, s1, sw, sw, 0, s1, s, s, GdkPixbuf.InterpType.BILINEAR, 255)
        p1.composite(p, s1, 0, sw, sw, s1, 0, s, s, GdkPixbuf.InterpType.BILINEAR, 255)
        return Gtk.Image.new_from_pixbuf(p)
    return Gtk.Image.new_from_icon_name(name, size)

# Label with no minimium width
class LabelNoMinWidth(Gtk.Label):
    def __init__(self, text):
        Gtk.Label.__init__(self, text)

    def do_get_preferred_width(self):
        return 0, 0

# HBox with no minimium width
class HBoxNoMinWidth(Gtk.HBox):
    def __init__(self):
        Gtk.HBox.__init__(self)

    def do_get_preferred_width(self):
        return 0, 0

class CustomContainer(Gtk.Box):
    def __init__(self, orientation=Gtk.Orientation.HORIZONTAL):
        Gtk.Box.__init__(self, orientation=orientation)
        self._restore_buttons = {}
        self._maximised = None
        self._minimised = set()

    def _restore_cb(self, button, widget):
        if not self._maximised and widget in self._minimised:
            self._minimised.remove(widget)
            widget.show()
            button.hide()

    def pack(self, widget, minimised=False):
        self.pack_start(widget, True, True, 0)

        button = Gtk.Button()
        self._restore_buttons[widget] = button
        button.connect('clicked', self._restore_cb, widget)
        self.pack_start(button, False, False, 0)

        if minimised:
            self._minimised.add(widget)

        if self._maximised:
            widget.hide()
            button.hide()
        elif minimised:
            widget.hide()
            button.show()
        else:
            widget.show()
            button.hide()

    def get_n_children(self):
        return len(self._restore_buttons)

    def get_n_minimised(self):
        return len(self._minimised)

    def get_minimised(self, widget):
        return widget in self._minimised

    def set_minimised(self, widget, minimised=True):
        if minimised:
            self._minimised.add(widget)
            if not self._maximised:
                widget.hide()
                self._restore_buttons[widget].show()
        else:
            self._minimised.remove(widget)
            if not self_maximised:
                widget.show()
                self._restore_buttons[widget].hide()

    def get_maximised(self):
        return self._maximised

    def set_maximised(self, widget, maximised=True):
        if maximised:
            self._maximised = widget
        else:
            self._maximised = None

        for k, v in self._restore_buttons.items():
            if self._maximised:
                b = False
                p = (k is self._maximised)
            else:
                b = (k in self._minimised)
                p = not b
            if p:
                k.show()
            else:
                k.hide()
            if b:
                v.show()
            else:
                v.hide()

    def get_shown_children(self):
        if self._maximised:
            return [ self._maximised ]
        return [ k for k in self._restore_buttons.keys() if k not in self._minimised ]

def _pixels(p):
    return (p + Pango.SCALE - 1) // Pango.SCALE

_special_characters = dict([ (chr(i & 0x7f), '^' + chr(64 + i)) for i in range(-1, 32) ])
_special_characters_whitespace = _special_characters.copy()

_special_characters['\r'] = ''
_special_characters['\n'] = ''

_special_characters_whitespace[' '] = '\u00b7' # middle dot
_special_characters_whitespace['\r'] = '\u00a4' # currency
_special_characters_whitespace['\n'] = '\u00b6' # pilcrow

_char_width_cache = {}

class LayoutCache:
    def __init__(self, context, font_name):
        self._context = context
        self._wrap_width = None
        self._show_whitespace = False
        self.set_font(font_name)

    def set_font(self, font_name):
        self._font = font = Pango.FontDescription(font_name)
        metrics = self._context.get_metrics(font)
        self._digit_width = metrics.get_approximate_digit_width()
        self._font_ascent = _pixels(metrics.get_ascent())
        self._font_height = self._font_ascent + _pixels(metrics.get_descent())
        self._character_widths = {}
        self.invalidate_all_lines()

    def get_font(self):
        return self._font

    def get_font_height(self):
        return self._font_height

    def _reset_cache(self):
        self._l2_cache.update(self._cache)
        self._cache.clear()
        self._line_widths.clear()

    def set_show_whitespace(self, v):
        if self._show_whitespace != v:
            self._show_whitespace = v
            self._reset_cache()

    # use None to turn off wrapping
    def set_wrap_width(self, width):
        if self._wrap_width != width:
            self._wrap_width = width
            self._reset_cache()

    # FIXME:
    def invalidate_all_lines(self):
        self._cache = {}
        self._l2_cache = {}
        self._line_widths = diffuse.pq.PriorityQueue()

    def invalidate_line(self, s):
        try:
            del self._cache[s]
        except KeyError:
            pass

    def get_layout(self, s):
        try:
            return self._cache[s]
        except KeyError:
            pass

        # layout can be reused if it didn't need to be wrapped and it still
        # doesn't
        ww = self._wrap_width
        try:
            layout = self._l2_cache[s]
            del self._l2_cache[s]
            if layout[-1][0] == 0:
                x = layout[-1][2]
                if not ww or x <= ww:
                    if s and ww is None:
                        self._line_widths.insert(x, s)
                    self._cache[s] = layout
                    return layout
        except KeyError:
            pass

        layout, row, start_x, x, start_col, col, start_idx, start_offset, idx = [], 0, 0, 0, 0, 0, 0, 0, 0
        if s:
            sw = self._show_whitespace
            if sw:
                sc = _special_characters_whitespace
            else:
                sc = _special_characters

            cws = self._character_widths
            tw = 8
            for c in s:
                if c in sc:
                    if c == '\t':
                        if sw:
                            # double angle
                            c = '\u00bb' + (tw - col % tw - 1) * ' '
                        else:
                            c = (tw - col % tw) * ' '
                    else:
                        c = sc[c]

                for j, p in enumerate(c):
                    try:
                        cw = cws[p]
                    except KeyError:
                        pl = Pango.Layout(self._context)
                        pl.set_text(p, -1)
                        pl.set_font_description(self._font)
                        cws[p] = cw = pl.get_extents()[1].width
                    try:
                        w = _char_width_cache[p]
                    except KeyError:
                        if unicodedata.east_asian_width(p) in 'WF':
                            w = 2
                        else:
                            w = 1
                        _char_width_cache[p] = w

                    if ww and x and x + cw > ww:
                        # start a new tuple
                        layout.append((row, start_x, x, start_col - start_offset, start_idx, start_offset, idx, j))
                        row += 1
                        start_x = x = 0
                        start_col = col
                        start_idx = idx
                        start_offset = j
                    col += w
                    x += cw
                idx += 1
            if ww is None:
                self._line_widths.insert(x, s)
        layout.append((row, start_x, x, start_col - start_offset, start_idx, start_offset, idx, 0))
        self._cache[s] = layout
        return layout

    def get_layout_string(self, s, col, idx, offset, end_idx, end_offset):
        ss = []
        if s:
            sw = self._show_whitespace
            if sw:
                sc = _special_characters_whitespace
            else:
                sc = _special_characters

            sa = ss.append
            tw = 8
            for c in s[idx:end_idx]:
                if c in sc:
                    if c == '\t':
                        if sw:
                            # double angle
                            c = '\u00bb' + (tw - col % tw - 1) * ' '
                        else:
                            c = (tw - col % tw) * ' '
                    else:
                        c = sc[c]

                for p in c[offset:]:
                    try:
                        w = _char_width_cache[p]
                    except KeyError:
                        if unicodedata.east_asian_width(p) in 'WF':
                            w = 2
                        else:
                            w = 1
                        _char_width_cache[p] = w
                    col += w
                    sa(p)
                offset = 0
            if end_offset:
                c = s[end_idx]
                if c in sc:
                    if c == '\t':
                        if sw:
                            # double angle
                            c = '\u00bb' + (tw - col % tw - 1) * ' '
                        else:
                            c = (tw - col % tw) * ' '
                    else:
                        c = sc[c]
                sa(c[offset:end_offset])
        return ''.join(ss)

    def get_max_width(self):
        return self._line_widths.max_priority()

class FileCompareSource:
    def __init__(self, n, context, font_name):
        self._content = content = diffuse.filecompare.FileCompare(n)

        self._hadj = Gtk.Adjustment()
        self._vadj = Gtk.Adjustment()
        self._sigs = sigs = {}
        for name in 'cursor-changed', 'rows-changed':
            sigs[name] = diffuse.signal.Signal()

        # indices of shown children
        # FIXME: how should these be modified?  should this be a set instead of a list?
        self._shown = []
        self._cache = LayoutCache(context, font_name)
        self._line_ends = diffuse.acache.AccumulationCache(self._get_n_rows)

        self._cursor_line = 0

    def get_n_lines(self):
        return self._content.get_n_lines()

    def load_file(self, f, filename, encodings):
        self._content.load_file(f, filename, encodings)

    def enable_undos(self):
        self._content.enable_undos()

    def _get_n_rows(self, i):
        func, c = self._cache.get_layout, self._content.get_string
        return max([ func(c(f, i))[-1][0] for f in self._shown ]) + 1

    def row_to_line(self, row):
        return self._line_ends.lookup(row)

    def get_line_start(self, i):
        return self._line_ends.get_partial_sum(i - 1) if i else 0

    def get_n_total_rows(self):
        return self.get_line_start(self.get_n_lines())

    def get_hadj(self):
        return self._hadj

    def get_vadj(self):
        return self._vadj

    def set_cursor_line(self, i):
        if self._cursor_line != i:
            self._cursor_line = i
            self._sigs['cursor-changed'].emit()

    def add_callback(self, name, cb, data=None):
        self._sigs[name].add_callback(cb, data)

    def allocation_changed(self, idx, w, h):
        # FIXME: this should probably just invalidate values and recompute things in redraw?
        # FIXME: should this be a separate method? should it invalidate the
        # cached values?
        if self._shown != idx:
            self._shown = idx

        # update wrap width
        ww = self._cache._wrap_width
        if ww is not None:
            new_ww = w * Pango.SCALE
            if ww != new_ww:
                self._cache.set_wrap_width(new_ww)
                self._line_ends.clear()
                ww = new_ww

        # get full dimensions
        nrows = self.get_n_total_rows()
        ny = (nrows + 1) * self._cache.get_font_height()
        if ww is None:
            nx = _pixels(self.get_max_width()) if nrows else 1
        else:
            nx = _pixels(ww)

        for adj, v, limit in zip((self._hadj, self._vadj), (w, h), (nx, ny)):
            val = int(adj.get_value())
            if val + v > limit:
                new_val = max(0, limit - v)
                if new_val != val:
                    adj.set_value(new_val)
            adj.set_page_increment(v)
            adj.set_page_size(v)
            adj.set_upper(limit)

class FilePane(Gtk.VBox):
    def __init__(self, content, idx):
        Gtk.VBox.__init__(self)

        self._buttons = {}
        self._labels = {}
        self._content = content
        self._idx = idx

        hadj = content.get_hadj()
        vadj = content.get_vadj()

        # header
        box = HBoxNoMinWidth()
        for name, icon in ('open', 'document-open'), ('reload', 'document-revert'), ('save', 'document-save'), ('save_as', 'document-save-as'):
            self._buttons[name] = button = Gtk.Button(None, image=get_image(icon, Gtk.IconSize.MENU))
            button.set_relief(Gtk.ReliefStyle.NONE)
            button.set_can_focus(False)
            box.pack_start(button, False, False, 0)
            button.show()

        self._labels['title'] = label = LabelNoMinWidth('This is my label')
        label.set_ellipsize(Pango.EllipsizeMode.MIDDLE)
        label.set_selectable(True)
        label.set_can_focus(False)
        box.pack_start(label, True, True, 0)
        label.show()

        for name, icon in ('minimise', 'view-restore'), ('maximise', 'view-fullscreen'), ('close', 'window-close'):
            if name == 'maximise':
                self._buttons[name] = button = Gtk.ToggleButton(None, image=get_image(icon, Gtk.IconSize.MENU))
            else:
                self._buttons[name] = button = Gtk.Button(None, image=get_image(icon, Gtk.IconSize.MENU))
            button.set_relief(Gtk.ReliefStyle.NONE)
            button.set_can_focus(False)
            box.pack_start(button, False, False, 0)
            button.show()
        self.pack_start(box, False, True, 0)
        box.show()

        grid = Gtk.Grid()
        self._darea = darea = Gtk.DrawingArea()
        darea.connect('draw', self._draw_cb)
        darea.set_hexpand(True)
        darea.set_vexpand(True)
        grid.attach(darea, 0, 0, 1, 1)
        darea.show()

        bar = Gtk.VScrollbar(vadj)
        bar.set_vexpand(True)
        vadj.connect('value-changed', self._scroll_cb)
        grid.attach(bar, 1, 0, 2, 1)
        bar.show()

        bar = Gtk.HScrollbar(hadj)
        bar.set_hexpand(True)
        hadj.connect('value-changed', self._scroll_cb)
        grid.attach(bar, 0, 1, 1, 2)
        bar.show()

        self.pack_start(grid, True, True, 0)
        grid.show()

        # footer
        box = HBoxNoMinWidth()

        self._labels['status'] = label = Gtk.Label('Status')
        label.set_halign(Gtk.Align.START)
        label.set_ellipsize(Pango.EllipsizeMode.END)
        box.pack_start(label, True, True, 0)
        label.show()

        sep = Gtk.VSeparator()
        box.pack_start(sep, False, False, 10)
        sep.show()

        self._labels['line_endings'] = label = Gtk.Label('Unix')
        box.pack_start(label, False, False, 0)
        label.show()

        sep = Gtk.VSeparator()
        box.pack_start(sep, False, False, 10)
        sep.show()

        self._labels['encoding'] = label = Gtk.Label('utf_8')
        box.pack_start(label, False, False, 0)
        label.show()

        sep = Gtk.VSeparator()
        box.pack_start(sep, False, False, 10)
        sep.show()

        self.pack_start(box, False, False, 0)
        box.show()

    def get_idx(self):
        return self._idx

    def _scroll_cb(self, adj):
        # update position
        self._darea.queue_draw()

    def _redraw(self, src, callback_data, data):
        self._darea.queue_draw()

    def _draw_cb(self, widget, cr):
        # FIXME: use cached buffer of a slightly larger size to support efficient smooth scrolling
        content = self._content
        dx = int(content.get_hadj().get_value())
        dy = int(content.get_vadj().get_value())
        fh = content._cache.get_font_height()

        playout = Pango.Layout(self.get_pango_context())
        playout.set_font_description(content._cache.get_font())

        x_end, y_end = cr.clip_extents()[2:4]
        p_start, p_end = dx * Pango.SCALE, (int(x_end) + dx) * Pango.SCALE
        gs, f = content._content.get_string, self._idx
        n = content.get_n_lines()

        row = dy // fh
        y = row * fh;
        while y - dy < y_end:
            i = content.row_to_line(row)
            if i >= n:
                break

            s = gs(f, i)
            layout = content._cache.get_layout(s)
            j = row - content.get_line_start(i)

            # FIXME: this should also use end_x
            nl = len(layout)
            low, high = 0, nl
            while low < high:
                mid = (low + high) // 2
                if j <= layout[mid][0]:
                    high = mid
                else:
                    low = mid + 1

            while low < nl:
                r, x, end_x, col, idx, offset, end_idx, end_offset = layout[low]
                if r != j or x >= p_end:
                    break

                cr.move_to((x - p_start) / Pango.SCALE, y - dy)
                playout.set_text(content._cache.get_layout_string(s, col, idx, offset, end_idx, end_offset), -1)
                PangoCairo.show_layout(cr, playout)
                low += 1
            row += 1
            y += fh;

        # render the cursor
        cursor_line = content._cursor_line
        cursor_start_row = content.get_line_start(cursor_line)
        if cursor_line < n:
            cursor_end_row = content.get_line_start(cursor_line + 1)
        else:
            cursor_end_row = cursor_start_row + 1

        cr.set_source_rgb(0.5, 0.5, 0.5)
        cr.set_line_width(1)
        cr.move_to(0, cursor_start_row * fh - dy + 0.5)
        cr.rel_line_to(x_end, 0)
        cr.stroke()
        cr.move_to(0, cursor_end_row * fh - dy + 0.5)
        cr.rel_line_to(x_end, 0)
        cr.stroke()

    def get_button(self, name):
        return self._buttons[name]

    def get_label(self, name):
        return self._labels[name]

    def get_darea(self):
        return self._darea

def append_buttons(box, size, specs):
    for spec in specs:
        if len(spec) > 0:
            button = Gtk.Button()
            button.set_relief(Gtk.ReliefStyle.NONE)
            button.set_can_focus(False)
            image = get_image(spec[0], size)
            button.add(image)
            image.show()
            #if len(spec) > 2:
                #button.connect('clicked', spec[1], spec[2])
                #if len(spec) > 3:
                    #button.set_tooltip_text(spec[3])
            box.pack_start(button, False, False, 0)
            button.show()
        else:
            separator = Gtk.VSeparator()
            box.pack_start(separator, False, False, 5)
            separator.show()

DIFFUSE_STOCK_NEW_2WAY_MERGE = 'diffuse-new-2way-merge'
DIFFUSE_STOCK_NEW_3WAY_MERGE = 'diffuse-new-3way-merge'

class FileCompareViewer(Gtk.VBox):
    def __init__(self, n):
        Gtk.VBox.__init__(self)

        self._content = content = FileCompareSource(n, self.get_pango_context(), 'monospace 10')
        # enable word wrap
        content._cache.set_wrap_width(1)
        #content.set_show_whitespace(True)

        box = HBoxNoMinWidth()
        append_buttons(box, Gtk.IconSize.LARGE_TOOLBAR, [
           [ DIFFUSE_STOCK_NEW_2WAY_MERGE ], #, self.new_2_way_file_merge_cb, None, _('New 2-Way File Merge') ],
           [ DIFFUSE_STOCK_NEW_3WAY_MERGE ], #, self.new_3_way_file_merge_cb, None, _('New 3-Way File Merge') ],
           [],
           [ 'system-run' ], #self.button_cb, 'realign_all', _('Realign All') ],
           [ 'go-top' ], #self.button_cb, 'first_difference', _('First Difference') ],
           [ 'go-up' ], #self.button_cb, 'previous_difference', _('Previous Difference') ],
           [ 'go-down' ], #self.button_cb, 'next_difference', _('Next Difference') ],
           [ 'go-bottom' ], #self.button_cb, 'last_difference', _('Last Difference') ],
           [],
           [ 'go-last' ], #self.button_cb, 'copy_selection_right', _('Copy Selection Right') ],
           [ 'go-first' ], #self.button_cb, 'copy_selection_left', _('Copy Selection Left') ],
           [ 'go-next' ], #self.button_cb, 'copy_left_into_selection', _('Copy Left Into Selection') ],
           [ 'go-previous' ], #self.button_cb, 'copy_right_into_selection', _('Copy Right Into Selection') ],
           [ DIFFUSE_STOCK_LEFT_RIGHT ], #, self.button_cb, 'merge_from_left_then_right', _('Merge From Left Then Right') ],
           [ DIFFUSE_STOCK_RIGHT_LEFT ], #, self.button_cb, 'merge_from_right_then_left', _('Merge From Right Then Left') ],
           [],
           [ 'edit-undo' ], #self.button_cb, 'undo', _('Undo') ],
           [ 'edit-redo' ], #self.button_cb, 'redo', _('Redo') ],
           [ 'edit-cut' ], #self.button_cb, 'cut', _('Cut') ],
           [ 'edit-copy' ], #self.button_cb, 'copy', _('Copy') ],
           [ 'edit-paste' ], #self.button_cb, 'paste', _('Paste') ],
           [ 'edit-clear' ] ]), #self.button_cb, 'clear_edits', _('Clear Edits') ] ])

        self.pack_start(box, False, False, 0)
        box.show()

        self._custom_container = cc = CustomContainer()
        cc.connect('size-allocate', self._size_allocate_cb)

        for i in range(n):
            pane = FilePane(content, i)
            cc.pack(pane)

            pane._darea.set_events(Gdk.EventMask.BUTTON_PRESS_MASK | Gdk.EventMask.BUTTON1_MOTION_MASK)
            pane._darea.connect('button-press-event', self._button_press_event_cb)
            pane._darea.connect('motion-notify-event', self._motion_notify_event_cb)

            pane.get_button('minimise').connect('clicked', self._minimise_pane_cb, pane)
            pane.get_button('maximise').connect('clicked', self._maximise_pane_cb, pane)
            content.add_callback('cursor-changed', pane._redraw)

        self.pack_start(cc, True, True, 0)
        cc.show()

        # FIXME: append merge pane

        statusbar = Gtk.Statusbar()
        context_id = statusbar.get_context_id('status')
        statusbar.push(context_id, 'Blah')
        self.pack_start(statusbar, False, False, 0)
        statusbar.show()

        self.set_can_focus(True)
        self.set_events(Gdk.EventMask.KEY_PRESS_MASK | Gdk.EventMask.FOCUS_CHANGE_MASK)
        self.connect('focus-in-event', self._focus_in_event_cb)
        self.connect('focus-out-event', self._focus_out_event_cb)
        self.connect('key-press-event', self._key_press_event_cb)

    def _button_press_event_cb(self, widget, event):
        if event.type == Gdk.EventType._2BUTTON_PRESS:
            print('double click', event.x, event.y)
        else:
            print('button_press_event', event.x, event.y)
        print('focused:', self.get_toplevel().get_focus())

    def _motion_notify_event_cb(self, widget, event):
        print('motion_notify_event', event.x, event.y)

    def _focus_in_event_cb(self, widget, event):
        print('focus_in_event')

    def _focus_out_event_cb(self, widget, event):
        print('focus_out_event')

    def _key_press_event_cb(self, widget, event):
        print('key_press_event', event.state, repr(event.string))
        # return True to prevent default handling
        content = self._content
        # FIXME: this should send out a signal causing the panes to redraw themselves...
        if event.keyval == Gdk.KEY_Up:
            if content._cursor_line > 0:
                content.set_cursor_line(content._cursor_line - 1)
        elif event.keyval == Gdk.KEY_Down:
            if content._cursor_line < content.get_n_lines():
                content.set_cursor_line(content._cursor_line + 1)
        # gtk.keysyms.Page_Up, gtk.keysyms.Page_Down
        return True

    def load_file(self, f, filename, encodings):
        return self._content.load_file(f, filename, encodings)

    def enable_undos(self):
        self._content.enable_undos()

    def _minimise_pane_cb(self, widget, pane):
        cc = self._custom_container
        if cc.get_maximised() is None and cc.get_n_children() - cc.get_n_minimised() > 1:
            cc.set_minimised(pane)

    def _maximise_pane_cb(self, widget, pane):
        self._custom_container.set_maximised(pane, self._custom_container.get_maximised() is None)

    def _size_allocate_cb(self, widget, event):
        w, h = 0, 0
        idx = []
        for i, c in enumerate(self._custom_container.get_shown_children()):
            a = c.get_darea().get_allocation()
            if i == 0 or w > a.width:
                w = a.width
            if i == 0 or h > a.height:
                h = a.height
            idx.append(c.get_idx())
        self._content.allocation_changed(idx, w, h)

class NotebookTab(Gtk.HBox):
    def __init__(self, title):
        Gtk.HBox.__init__(self)

        image = get_image('text-x-generic', Gtk.IconSize.MENU)
        self.pack_start(image, False, False, 5)
        image.show()

        label = Gtk.Label(title)
        label.set_alignment(0, 0.5)
        #label.set_ellipsize(Pango.EllipsizeMode.END)
        self.pack_start(label, False, False, 0)
        label.show()

        button = Gtk.Button(None, image=get_image('window-close', Gtk.IconSize.MENU))
        button.set_relief(Gtk.ReliefStyle.NONE)
        button.set_can_focus(False)
        self.pack_start(button, False, False, 0)
        button.show()

class DiffuseApp(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title='Diffuse')
        self._notebook = nb = Gtk.Notebook()
        nb.connect('switch-page', self._switch_page_cb)
        nb.connect('change-current-page', self._change_current_page_cb)
        nb.connect('select-page', self._select_page_cb)
        nb.connect('realize', self._realize_cb)
        nb.set_scrollable(True)
        nb.set_can_focus(False)
        self.add(nb)
        nb.show()

        self.move(100, 100)
        self.resize(1000, 800)

    def _switch_page_cb(self, widget, page, page_id):
        page.grab_focus()

    def _change_current_page_cb(self, widget, page, page_id):
        print('_change_current_page_cb', widget, page, page_id)

    def _select_page_cb(self, widget, page):
        print('_select_page_cb', widget, page)

    def new_tab(self, label, specs):
        fc = FileCompareViewer(max(len(specs), 2))
        for i, spec in enumerate(specs):
            filename, encodings, filelabel = spec
            # FIXME: do something with the filelabel
            fc.load_file(i, filename, encodings)
        fc.enable_undos()
        self._notebook.append_page(fc, NotebookTab(label))
        self._notebook.set_tab_reorderable(fc, True)
        fc.show()

    def _realize_cb(self, widget):
        nb = self._notebook
        i = nb.get_current_page()
        if i >= 0:
            nb.get_nth_page(i).grab_focus()

win = DiffuseApp()
win.connect('delete-event', Gtk.main_quit)
n_tabs = 0
i, specs, encodings, label = 1, [], [ 'utf_8' ], None
while i < len(sys.argv):
    arg = sys.argv[i]
    i += 1

    if arg == '-t':
        # start new tab
        if len(specs):
            n_tabs += 1
            win.new_tab('Page %d' % (n_tabs,), specs)
            specs = []
    elif arg == '-e':
        # specify encoding
        if i < len(sys.argv):
            encodings = sys.argv[i].split(' ')
            i += 1
    elif arg == '-l':
        # set file label
        if i < len(sys.argv):
            label = sys.argv[i]
            i += 1
    else:
        # given file name
        specs.append((arg, encodings, label))
        label = None
if len(specs) or n_tabs == 0:
    n_tabs += 1
    win.new_tab('Page %d' % (n_tabs,), specs)
win.show()
Gtk.main()
